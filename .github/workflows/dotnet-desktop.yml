name: Build and Publish

on:
  push:
    branches:
      - main

jobs:
  BuildTest:
    runs-on: ubuntu-latest
    name: Build Test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
          
      - name: Install dependencies
        run: dotnet restore

      - name: Build All
        run: dotnet build

  WindowsBuild:
    needs: BuildTest
    runs-on: ubuntu-latest
    name: Genreate Windows Builds
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
          
      - name: Install dependencies
        run: dotnet restore

      - name: Publish Game (Windows)
        run: dotnet publish BugDefender.OpenGL -c Release -r win-x64 /p:PublishReadyToRun=false /p:TieredCompilation=false /p:PublishSingleFile=true --self-contained
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: BugDefender.OpenGL/bin/Release/net7.0/win-x64/publish/
      - name: Zip artifact
        run: |
             cd ./BugDefender.OpenGL/bin/Release/net7.0/win-x64/publish/
             zip windows.zip ./* -r
             mv windows.zip ../../../../../../windows.zip
             cd ../../../../../../
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-build-zip
          path: windows.zip

      - name: Publish Toolkit (Windows)
        run: dotnet publish BugDefender.CLI -c Release -r win-x64 /p:PublishReadyToRun=false /p:TieredCompilation=false /p:PublishSingleFile=true --self-contained
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-toolkit-build
          path: BugDefender.CLI/bin/Release/net7.0/win-x64/publish/
      - name: Zip artifact
        run: |
             cd ./BugDefender.CLI/bin/Release/net7.0/win-x64/publish/
             zip windows-toolkit.zip ./* -r
             mv windows-toolkit.zip ../../../../../../windows-toolkit.zip
             cd ../../../../../../
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-toolkit-build-zip
          path: windows-toolkit.zip

  LinuxBuild:
    needs: BuildTest
    runs-on: ubuntu-latest
    name: Generate Linux Builds
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
          
      - name: Install dependencies
        run: dotnet restore

      - name: Publish Game (Linux)
        run: dotnet publish BugDefender.OpenGL -c Release -r linux-x64 /p:PublishReadyToRun=false /p:TieredCompilation=false /p:PublishSingleFile=true --self-contained
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: BugDefender.OpenGL/bin/Release/net7.0/linux-x64/publish/
      - name: Zip artifact
        run: |
             cd ./BugDefender.OpenGL/bin/Release/net7.0/linux-x64/publish/
             zip linux.zip ./* -r
             mv linux.zip ../../../../../../linux.zip
             cd ../../../../../../
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-build-zip
          path: linux.zip

      - name: Publish Toolkit (Linux)
        run: dotnet publish BugDefender.CLI -c Release -r linux-x64 /p:PublishReadyToRun=false /p:TieredCompilation=false /p:PublishSingleFile=true --self-contained
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-toolkit-build
          path: BugDefender.CLI/bin/Release/net7.0/linux-x64/publish/
      - name: Zip artifact
        run: |
             cd ./BugDefender.CLI/bin/Release/net7.0/linux-x64/publish/
             zip linux-toolkit.zip ./* -r
             mv linux-toolkit.zip ../../../../../../linux-toolkit.zip
             cd ../../../../../../
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-toolkit-build-zip
          path: linux-toolkit.zip

  CreateWindowsInstaller:
    needs: [BuildTest, WindowsBuild]
    runs-on: windows-latest
    name: Create Windows Installer 
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
          
      - name: Install dependencies
        run: dotnet restore

      - name: Download Windows Build
        uses: actions/download-artifact@v4
        with:
          name: windows-build
          path: BugDefender.OpenGL/bin/Release/net7.0/win-x64/publish/

      - name: Compile windows installer
        uses: Minionguyjpro/Inno-Setup-Action@v1.2.2
        with:
          path: BugDefender.OpenGL/inno.iss

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: BugDefender.OpenGL/Output/*.exe
            
  PublishAll:
    needs: [BuildTest, WindowsBuild, LinuxBuild, CreateWindowsInstaller]
    runs-on: ubuntu-latest
    name: Publish All
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download Windows Build
        uses: actions/download-artifact@v4
        with:
          name: windows-build-zip
      - name: Download Windows Toolkit Build
        uses: actions/download-artifact@v4
        with:
          name: windows-toolkit-build-zip

      - name: Download Linux Build
        uses: actions/download-artifact@v4
        with:
          name: linux-build-zip
      - name: Download Linux Toolkit Build
        uses: actions/download-artifact@v4
        with:
          name: linux-toolkit-build-zip

      - name: Download Windows Installer
        uses: actions/download-artifact@v4
        with:
          name: windows-installer

      - name: Get Package version
        id: get-version
        uses: kzrnm/get-net-sdk-project-versions-action@v1
        with:
          proj-path: BugDefender.OpenGL/BugDefender.OpenGL.csproj

      - name: Generate tag
        continue-on-error: true
        uses: rickstaa/action-create-tag@v1
        id: "tag_create"
        with:
          tag: "v${{ steps.get-version.outputs.package-version }}"
          message: "Latest release"

      - name: Generate Release
        uses: ncipollo/release-action@v1
        with:
          skipIfReleaseExists: true
          artifacts: "*.zip,*.exe"
          tag: "v${{ steps.get-version.outputs.package-version }}"
